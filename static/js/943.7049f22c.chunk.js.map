{"version":3,"file":"static/js/943.7049f22c.chunk.js","mappings":"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","sources":["redux/contactsSlice/selectors.js","redux/filterSlice/selectors.js","webpack://react-homework-template/./src/components/Contacts.module.css?72e2","components/ContactsList/ContactsList.jsx","../node_modules/nanoid/index.browser.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["export const selectContacts = state => {\n  //console.log('!', state.contacts);\n  return state.contacts.contacts;\n};\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n","export const selectFilter = state => state.filter.filter;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__h9kuH\",\"form\":\"Contacts_form__rKSRx\",\"formLabel\":\"Contacts_formLabel__rtUv3\",\"formInput\":\"Contacts_formInput__qf89G\",\"btnSubmit\":\"Contacts_btnSubmit__M8dyG\",\"list\":\"Contacts_list__I8Wl+\",\"contactItem\":\"Contacts_contactItem__GyBkI\",\"button\":\"Contacts_button__ZoBDP\"};","//import { ContactItem } from 'components/ContactsItem/ContactsItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contactsSlice/operations';\nimport { selectContacts } from 'redux/contactsSlice/selectors';\nimport { selectFilter } from 'redux/filterSlice/selectors';\nimport css from '../Contacts.module.css';\n\n/**const ContactList = ({ items }) => {\n  return (\n    <ul>\n      {items.map(({ id, name, number }) => (\n        <li key={id}>\n          <ContactItem key={id} id={id} name={name} number={number} />\n        </li>\n      ))}\n    </ul>\n  );\n};\nexport default ContactList**/\nexport function ContactList() {\n  const contacts = useSelector(selectContacts);\n\n  const filterValue = useSelector(selectFilter).toLowerCase();\n\n  const dispatch = useDispatch();\n\n  const handleDelete = evt => {\n    dispatch(deleteContact(evt.currentTarget.id));\n  };\n  // const handleDelete = () => {\n  //   dispatch(deleteContact(id));\n  // };\n\n  const getVisibilityContacts = () => {\n    if (!filterValue || filterValue === '') {\n      return contacts;\n    }\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filterValue)\n    );\n  };\n\n  const visibilityContacts = getVisibilityContacts();\n  console.log({ contacts });\n  return (\n    <ul>\n      {visibilityContacts.map(contact => (\n        //<ContactItem key={contact.id}></ContactItem>\n        //<ContactItem key={id} id={id} name={name} number={number} />\n        <li className={css.contactItem} key={contact.id} id={contact.id}>\n          <p>\n            {contact.name}: {contact.number}\n          </p>\n          <button\n            className={css.button}\n            id={contact.id}\n            type=\"button\"\n            onClick={handleDelete}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contactsSlice/operations';\nimport { selectContacts } from 'redux/contactsSlice/selectors';\nimport css from '../Contacts.module.css';\n\nconst ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch(); //посилання на функцію відправки action//\n\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    //const contact = {\n    //id: nanoid(),\n    //name: event.target.elements.name.value,\n    //number: event.target.elements.number.value,\n    const form = evt.target;\n    const name = form.name.value;\n    const number = form.number.value;\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert(`${name} is alredy in contacts.`);\n    }\n\n    //перевірка чи існує такий контакт вже//\n    //const existingContact = contacts.find(\n    //({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    //);\n\n    //if (existingContact) {\n    //return alert(`${contact.name}: is already in contacts`);\n    //}\n\n    //викликаємо генератор екшену та передаємо текст завдання для payload//\n    console.log({ name, number });\n    dispatch(addContact({ name, number }));\n    form.reset(); //очищаємо форму//\n  }\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.formLabel} htmlFor=\"\">\n        Name\n        <input\n          className={css.formInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          id={nanoid()}\n          required\n        />\n      </label>\n      <label className={css.formLabel} htmlFor=\"\">\n        Number\n        <input\n          className={css.formInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          id={nanoid()}\n          required\n        />\n      </label>\n      <button className={css.btnSubmit} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\nexport default ContactForm;\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice/filterSlice';\nimport css from '../Contacts.module.css';\n\nexport const Filter = ({ filter }) => {\n  const dispatch = useDispatch();\n  const onChangeFilter = e => dispatch(setFilter(e.target.value));\n\n  return (\n    <>\n      <h2>Contacts</h2>\n      <div>\n        <label className={css.formLabel}>\n          Find contacts by name\n          <input\n            className={css.formInput}\n            type=\"text\"\n            value={filter}\n            onChange={onChangeFilter}\n          />\n        </label>\n      </div>\n    </>\n  );\n};\n","import { Helmet } from 'react-helmet';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contactsSlice/operations';\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport ContactForm from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\n//import { selectFilter } from 'redux/filterSlice/selectors';\nimport { selectIsLoading } from 'redux/contactsSlice/selectors';\n\n//import { getFilteredContacts } from 'redux/selectors';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  //const contacts = useSelector(selectContacts);\n\n  //const filteredContacts = useSelector(selectFilter);\n  //const visibleContacts = useSelector(getFilteredContacts);\n\n  //return (\n  //<>\n  //<Helmet>\n  //<title>Your contacts</title>\n  //</Helmet>\n  //<div>{isLoading && 'Request in progress...'}</div>\n  //<ContactForm />\n  //{contacts.length > 0 ? (\n  //<>\n  //<Filter filter={filteredContacts} />\n  //ContactList items={visibleContacts} />\n  //</>\n  //) : (\n  //<p style={{ textAlign: 'center' }}>There are no contacts</p>\n  //)}\n  //</>\n  //);\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectIsLoading","isLoading","selectFilter","filter","ContactList","useSelector","filterValue","toLowerCase","dispatch","useDispatch","handleDelete","evt","deleteContact","currentTarget","id","visibilityContacts","contact","name","includes","console","log","map","className","css","number","type","onClick","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","onSubmit","preventDefault","form","target","value","find","alert","addContact","reset","htmlFor","pattern","title","required","Filter","onChange","e","setFilter","useEffect","fetchContacts","Helmet"],"sourceRoot":""}
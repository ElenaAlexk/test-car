{"version":3,"file":"static/js/289.dd5034fc.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/Contacts.module.css?72e2","components/ContactsItem/ContactsItem.jsx","components/ContactsList/ContactsList.jsx","../node_modules/nanoid/index.browser.js","redux/contactsSlice/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","redux/filterSlice/selectors.js","../node_modules/reselect/es/defaultMemoize.js","../node_modules/reselect/es/index.js","redux/selectors.js","pages/Contacts.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__h9kuH\",\"form\":\"Contacts_form__rKSRx\",\"formLabel\":\"Contacts_formLabel__rtUv3\",\"formInput\":\"Contacts_formInput__qf89G\",\"btnSubmit\":\"Contacts_btnSubmit__M8dyG\",\"list\":\"Contacts_list__I8Wl+\",\"contactItem\":\"Contacts_contactItem__GyBkI\",\"button\":\"Contacts_button__ZoBDP\"};","import { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport css from '../Contacts.module.css';\nimport { deleteContact } from 'redux/contactsSlice/operations';\n\nexport const ContactItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      <li className={css.contactItem} key={id}>\n        <p>\n          {name}: {number}\n        </p>\n        <button className={css.button} type=\"button\" onClick={handleDelete}>\n          Delete\n        </button>\n      </li>\n    </>\n  );\n};\n\nContactItem.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }).isRequired\n  ),\n};\n","import { ContactItem } from 'components/ContactsItem/ContactsItem';\n\nexport const ContactList = ({ items }) => {\n  return (\n    <ul>\n      {items.map(({ id, name, number }) => (\n        <li key={id}>\n          <ContactItem key={id} id={id} name={name} number={number} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","export const selectContacts = state => state.contacts.items;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { addContact } from 'redux/contactsSlice/operations';\nimport { selectContacts } from 'redux/contactsSlice/selectors';\nimport css from '../Contacts.module.css';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch(); //посилання на функцію відправки action//\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const contact = {\n      id: nanoid(),\n      name: event.target.elements.name.value,\n      number: event.target.elements.number.value,\n    };\n\n    //перевірка чи існує такий контакт вже//\n    const existingContact = contacts.find(\n      ({ name }) => name.toLowerCase() === contact.name.toLowerCase()\n    );\n\n    if (existingContact) {\n      return alert(`${contact.name}: is already in contacts`);\n    }\n\n    //викликаємо генератор екшену та передаємо текст завдання для payload//\n    dispatch(addContact(contact));\n    event.target.reset(); //очищаємо форму//\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <label className={css.formLabel} htmlFor=\"\">\n        Name\n        <input\n          className={css.formInput}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          id={nanoid()}\n          required\n        />\n      </label>\n      <label className={css.formLabel} htmlFor=\"\">\n        Number\n        <input\n          className={css.formInput}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          id={nanoid()}\n          required\n        />\n      </label>\n      <button className={css.btnSubmit} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { setFilter } from 'redux/filterSlice/filterSlice';\nimport css from '../Contacts.module.css';\n\nexport const Filter = ({ filter }) => {\n  const dispatch = useDispatch();\n  const onChangeFilter = e => dispatch(setFilter(e.target.value));\n\n  return (\n    <>\n      <h2>Contacts</h2>\n      <div>\n        <label className={css.formLabel}>\n          Find contacts by name\n          <input\n            className={css.formInput}\n            type=\"text\"\n            value={filter}\n            onChange={onChangeFilter}\n          />\n        </label>\n      </div>\n    </>\n  );\n};\n","export const selectFilter = state => state.filter.filter;\n","// Cache implementation based on Erik Rasmussen's `lru-memoize`:\n// https://github.com/erikras/lru-memoize\nvar NOT_FOUND = 'NOT_FOUND';\n\nfunction createSingletonCache(equals) {\n  var entry;\n  return {\n    get: function get(key) {\n      if (entry && equals(entry.key, key)) {\n        return entry.value;\n      }\n\n      return NOT_FOUND;\n    },\n    put: function put(key, value) {\n      entry = {\n        key: key,\n        value: value\n      };\n    },\n    getEntries: function getEntries() {\n      return entry ? [entry] : [];\n    },\n    clear: function clear() {\n      entry = undefined;\n    }\n  };\n}\n\nfunction createLruCache(maxSize, equals) {\n  var entries = [];\n\n  function get(key) {\n    var cacheIndex = entries.findIndex(function (entry) {\n      return equals(key, entry.key);\n    }); // We found a cached entry\n\n    if (cacheIndex > -1) {\n      var entry = entries[cacheIndex]; // Cached entry not at top of cache, move it to the top\n\n      if (cacheIndex > 0) {\n        entries.splice(cacheIndex, 1);\n        entries.unshift(entry);\n      }\n\n      return entry.value;\n    } // No entry found in cache, return sentinel\n\n\n    return NOT_FOUND;\n  }\n\n  function put(key, value) {\n    if (get(key) === NOT_FOUND) {\n      // TODO Is unshift slow?\n      entries.unshift({\n        key: key,\n        value: value\n      });\n\n      if (entries.length > maxSize) {\n        entries.pop();\n      }\n    }\n  }\n\n  function getEntries() {\n    return entries;\n  }\n\n  function clear() {\n    entries = [];\n  }\n\n  return {\n    get: get,\n    put: put,\n    getEntries: getEntries,\n    clear: clear\n  };\n}\n\nexport var defaultEqualityCheck = function defaultEqualityCheck(a, b) {\n  return a === b;\n};\nexport function createCacheKeyComparator(equalityCheck) {\n  return function areArgumentsShallowlyEqual(prev, next) {\n    if (prev === null || next === null || prev.length !== next.length) {\n      return false;\n    } // Do this in a for loop (and not a `forEach` or an `every`) so we can determine equality as fast as possible.\n\n\n    var length = prev.length;\n\n    for (var i = 0; i < length; i++) {\n      if (!equalityCheck(prev[i], next[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n}\n// defaultMemoize now supports a configurable cache size with LRU behavior,\n// and optional comparison of the result value with existing values\nexport function defaultMemoize(func, equalityCheckOrOptions) {\n  var providedOptions = typeof equalityCheckOrOptions === 'object' ? equalityCheckOrOptions : {\n    equalityCheck: equalityCheckOrOptions\n  };\n  var _providedOptions$equa = providedOptions.equalityCheck,\n      equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa,\n      _providedOptions$maxS = providedOptions.maxSize,\n      maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS,\n      resultEqualityCheck = providedOptions.resultEqualityCheck;\n  var comparator = createCacheKeyComparator(equalityCheck);\n  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator); // we reference arguments instead of spreading them for performance reasons\n\n  function memoized() {\n    var value = cache.get(arguments);\n\n    if (value === NOT_FOUND) {\n      // @ts-ignore\n      value = func.apply(null, arguments);\n\n      if (resultEqualityCheck) {\n        var entries = cache.getEntries();\n        var matchingEntry = entries.find(function (entry) {\n          return resultEqualityCheck(entry.value, value);\n        });\n\n        if (matchingEntry) {\n          value = matchingEntry.value;\n        }\n      }\n\n      cache.put(arguments, value);\n    }\n\n    return value;\n  }\n\n  memoized.clearCache = function () {\n    return cache.clear();\n  };\n\n  return memoized;\n}","import { defaultMemoize, defaultEqualityCheck } from './defaultMemoize';\nexport { defaultMemoize, defaultEqualityCheck };\n\nfunction getDependencies(funcs) {\n  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;\n\n  if (!dependencies.every(function (dep) {\n    return typeof dep === 'function';\n  })) {\n    var dependencyTypes = dependencies.map(function (dep) {\n      return typeof dep === 'function' ? \"function \" + (dep.name || 'unnamed') + \"()\" : typeof dep;\n    }).join(', ');\n    throw new Error(\"createSelector expects all input-selectors to be functions, but received the following types: [\" + dependencyTypes + \"]\");\n  }\n\n  return dependencies;\n}\n\nexport function createSelectorCreator(memoize) {\n  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    memoizeOptionsFromArgs[_key - 1] = arguments[_key];\n  }\n\n  var createSelector = function createSelector() {\n    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      funcs[_key2] = arguments[_key2];\n    }\n\n    var _recomputations = 0;\n\n    var _lastResult; // Due to the intricacies of rest params, we can't do an optional arg after `...funcs`.\n    // So, start by declaring the default value here.\n    // (And yes, the words 'memoize' and 'options' appear too many times in this next sequence.)\n\n\n    var directlyPassedOptions = {\n      memoizeOptions: undefined\n    }; // Normally, the result func or \"output selector\" is the last arg\n\n    var resultFunc = funcs.pop(); // If the result func is actually an _object_, assume it's our options object\n\n    if (typeof resultFunc === 'object') {\n      directlyPassedOptions = resultFunc; // and pop the real result func off\n\n      resultFunc = funcs.pop();\n    }\n\n    if (typeof resultFunc !== 'function') {\n      throw new Error(\"createSelector expects an output function after the inputs, but received: [\" + typeof resultFunc + \"]\");\n    } // Determine which set of options we're using. Prefer options passed directly,\n    // but fall back to options given to createSelectorCreator.\n\n\n    var _directlyPassedOption = directlyPassedOptions,\n        _directlyPassedOption2 = _directlyPassedOption.memoizeOptions,\n        memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2; // Simplifying assumption: it's unlikely that the first options arg of the provided memoizer\n    // is an array. In most libs I've looked at, it's an equality function or options object.\n    // Based on that, if `memoizeOptions` _is_ an array, we assume it's a full\n    // user-provided array of options. Otherwise, it must be just the _first_ arg, and so\n    // we wrap it in an array so we can apply it.\n\n    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];\n    var dependencies = getDependencies(funcs);\n    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {\n      _recomputations++; // apply arguments instead of spreading for performance.\n\n      return resultFunc.apply(null, arguments);\n    }].concat(finalMemoizeOptions)); // If a selector is called with the exact same arguments we don't need to traverse our dependencies again.\n\n    var selector = memoize(function dependenciesChecker() {\n      var params = [];\n      var length = dependencies.length;\n\n      for (var i = 0; i < length; i++) {\n        // apply arguments instead of spreading and mutate a local list of params for performance.\n        // @ts-ignore\n        params.push(dependencies[i].apply(null, arguments));\n      } // apply arguments instead of spreading for performance.\n\n\n      _lastResult = memoizedResultFunc.apply(null, params);\n      return _lastResult;\n    });\n    Object.assign(selector, {\n      resultFunc: resultFunc,\n      memoizedResultFunc: memoizedResultFunc,\n      dependencies: dependencies,\n      lastResult: function lastResult() {\n        return _lastResult;\n      },\n      recomputations: function recomputations() {\n        return _recomputations;\n      },\n      resetRecomputations: function resetRecomputations() {\n        return _recomputations = 0;\n      }\n    });\n    return selector;\n  }; // @ts-ignore\n\n\n  return createSelector;\n}\nexport var createSelector = /* #__PURE__ */createSelectorCreator(defaultMemoize);\n// Manual definition of state and output arguments\nexport var createStructuredSelector = function createStructuredSelector(selectors, selectorCreator) {\n  if (selectorCreator === void 0) {\n    selectorCreator = createSelector;\n  }\n\n  if (typeof selectors !== 'object') {\n    throw new Error('createStructuredSelector expects first argument to be an object ' + (\"where each property is a selector, instead received a \" + typeof selectors));\n  }\n\n  var objectKeys = Object.keys(selectors);\n  var resultSelector = selectorCreator( // @ts-ignore\n  objectKeys.map(function (key) {\n    return selectors[key];\n  }), function () {\n    for (var _len3 = arguments.length, values = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      values[_key3] = arguments[_key3];\n    }\n\n    return values.reduce(function (composition, value, index) {\n      composition[objectKeys[index]] = value;\n      return composition;\n    }, {});\n  });\n  return resultSelector;\n};","import { createSelector } from '@reduxjs/toolkit';\nimport { selectContacts } from './contactsSlice/selectors';\nimport { selectFilter } from './filterSlice/selectors';\n\nexport const getFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import { Helmet } from 'react-helmet';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contactsSlice/operations';\nimport { ContactList } from 'components/ContactsList/ContactsList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { selectFilter } from 'redux/filterSlice/selectors';\nimport { selectContacts, selectIsLoading } from 'redux/contactsSlice/selectors';\nimport { getFilteredContacts } from 'redux/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(selectContacts);\n\n  const filteredContacts = useSelector(selectFilter);\n  const visibleContacts = useSelector(getFilteredContacts);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <div>{isLoading && 'Request in progress...'}</div>\n      <ContactForm />\n      {contacts.length > 0 ? (\n        <>\n          <Filter filter={filteredContacts} />\n          <ContactList item={visibleContacts} />\n        </>\n      ) : (\n        <p>There are no contacts</p>\n      )}\n    </>\n  );\n}\n"],"names":["ContactItem","id","name","number","dispatch","useDispatch","className","css","type","onClick","deleteContact","ContactList","items","map","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","selectContacts","state","contacts","selectIsLoading","isLoading","ContactForm","useSelector","onSubmit","event","preventDefault","contact","target","elements","value","find","toLowerCase","alert","addContact","reset","htmlFor","pattern","title","required","Filter","filter","onChange","e","setFilter","selectFilter","NOT_FOUND","defaultEqualityCheck","a","b","defaultMemoize","func","equalityCheckOrOptions","providedOptions","equalityCheck","_providedOptions$equa","_providedOptions$maxS","maxSize","resultEqualityCheck","comparator","prev","next","length","i","createCacheKeyComparator","cache","equals","entry","get","key","put","getEntries","clear","undefined","createSingletonCache","entries","cacheIndex","findIndex","splice","unshift","pop","createLruCache","memoized","arguments","apply","matchingEntry","clearCache","getDependencies","funcs","dependencies","Array","isArray","every","dep","dependencyTypes","join","Error","createSelectorCreator","memoize","_len","memoizeOptionsFromArgs","_key","createSelector","_len2","_key2","_lastResult","_recomputations","directlyPassedOptions","memoizeOptions","resultFunc","_directlyPassedOption","_directlyPassedOption2","finalMemoizeOptions","memoizedResultFunc","concat","selector","params","push","Object","assign","lastResult","recomputations","resetRecomputations","getFilteredContacts","includes","Contacts","useEffect","fetchContacts","filteredContacts","visibleContacts","Helmet","item"],"sourceRoot":""}